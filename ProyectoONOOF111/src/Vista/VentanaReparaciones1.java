/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Controlador.Conexion;

/**
 *
 * @author nfswo
 */
public class VentanaReparaciones1 extends javax.swing.JFrame {

    public PreparedStatement ps, ps1;
    public ResultSet rs;
    public DefaultTableModel dft;
    int resultado;
    /**
     * Creates new form VentanaInsumos
     */
    public VentanaReparaciones1() {
        initComponents();
        this.setLocation(270, 165);
        //this.setAlwaysOnTop(true);
        mostrarTabla();mostrarTablaP();
        seleccionarTabla();

    }

    public void mostrarTabla() {
        DefaultTableModel modelo = new DefaultTableModel();
        rs = Conexion.getTabla("select *from reparacion");
        //se asignan los nombre de la columna
        modelo.setColumnIdentifiers(new Object[]
        {
            "Id", "ID_Producto", "Id_Cliente", "Descripcion", "Fecha", "Total"});

        try
        {
            while (rs.next())
            {
                modelo.addRow(new Object[]
                {
                    rs.getString("id_Reparacion"),
                    rs.getString("id_producto"),
                    rs.getString("id_cliente"),
                    rs.getString("descripcion"),
                    rs.getString("fecha"),
                    rs.getString("total")
                });

            }
            tablaInsumos.setModel(modelo);
        } catch (Exception e)
        {
            //JOptionPane.showMessageDialog(null, e);
        }
        //seleccionarTabla();
    }
    
    public void mostrarTablaP() {
        DefaultTableModel modelo = new DefaultTableModel();
        rs = Conexion.getTabla("select *from inventario");
        //se asignan los nombre de la columna
        modelo.setColumnIdentifiers(new Object[]
        {
            "ID Producto", "Nombre del producto", "Descripci√≥n", "Cantidad de existencia", "Precio unidad"});

        try
        {
            while (rs.next())
            {
                modelo.addRow(new Object[]
                {
                    rs.getString("id_producto"),
                    rs.getString("nombre_producto"),
                    rs.getString("descripcion"),
                    rs.getString("cantidad_existencia"),
                    rs.getString("precio_unidad")
                });

            }
            tProductos.setModel(modelo);
        } catch (Exception e)
        {
            //JOptionPane.showMessageDialog(null, e);
        }
        //seleccionarTabla();
    }

    public void limpiar() {
        cId.setText("");
        cProducto.setText("");
        buscador.setSelectedItem(null);
        cBuscar.setText("");
        cCliente.setText("");
        cDescripcion.setText("");
        cFecha.setText("");
        cPrecio.setText("");
        tProductos.setRowSelectionAllowed(false);
        botonRegistrar.setEnabled(true);
        mostrarTabla();
         mostrarTablaP();

    }


    private void seleccionarTabla() {
        tablaInsumos.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                limpiar();
                int row = tablaInsumos.rowAtPoint(e.getPoint());
                cId.setText(tablaInsumos.getValueAt(row, 0).toString());
                cProducto.setText(tablaInsumos.getValueAt(row, 1).toString());
                cCliente.setText(tablaInsumos.getValueAt(row, 2).toString());
                cDescripcion.setText(tablaInsumos.getValueAt(row, 3).toString());
                cFecha.setText(tablaInsumos.getValueAt(row, 4).toString());
            cPrecio.setText(tablaInsumos.getValueAt(row, 5).toString());
                botonRegistrar.setEnabled(false);

            }
        });

    }

   /* public void mostrarComboProv() {
        try
        {
            rs = Conexion.getTabla("select *from proveedor");
            while (rs.next())
            {
                comboBuscar.addItem(rs.getString("nombre"));
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(VentanaReparaciones1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }*/

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        botonSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInsumos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cCliente = new javax.swing.JTextField();
        cFecha = new javax.swing.JTextField();
        cDescripcion = new javax.swing.JTextField();
        cPrecio = new javax.swing.JTextField();
        bLimpiar = new javax.swing.JButton();
        cId = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        botonBuscar = new javax.swing.JButton();
        buscador = new javax.swing.JComboBox<>();
        cBuscar = new javax.swing.JTextField();
        cProducto = new javax.swing.JTextField();
        botonRegistrar = new javax.swing.JButton();
        botonActualizar = new javax.swing.JButton();
        bEliminar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tProductos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        botonSalir.setBackground(new java.awt.Color(51, 51, 51));
        botonSalir.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        botonSalir.setForeground(new java.awt.Color(255, 255, 255));
        botonSalir.setText("Salir");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setToolTipText("");

        tablaInsumos.setBackground(new java.awt.Color(153, 153, 153));
        tablaInsumos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaInsumos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaInsumos.setAutoscrolls(false);
        tablaInsumos.setSelectionBackground(new java.awt.Color(102, 102, 102));
        jScrollPane1.setViewportView(tablaInsumos);

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cajero.png"))); // NOI18N
        jLabel1.setText("Registro de reparaciones");

        jLabel2.setFont(new java.awt.Font("Sitka Banner", 1, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("ID_Producto:");

        jLabel3.setFont(new java.awt.Font("Sitka Banner", 1, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Id:");

        jLabel5.setFont(new java.awt.Font("Sitka Banner", 1, 20)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Id_Cliente:");

        cCliente.setEditable(true);
        cCliente.setBackground(new java.awt.Color(255, 255, 255));
        cCliente.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cCliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cClienteActionPerformed(evt);
            }
        });
        cCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cClienteKeyTyped(evt);
            }
        });

        cFecha.setEditable(true);
        cFecha.setBackground(new java.awt.Color(255, 255, 255));
        cFecha.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cFecha.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cDescripcion.setBackground(new java.awt.Color(255, 255, 255));
        cDescripcion.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cDescripcion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cDescripcionActionPerformed(evt);
            }
        });

        cPrecio.setBackground(new java.awt.Color(255, 255, 255));
        cPrecio.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cPrecio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cPrecioActionPerformed(evt);
            }
        });
        cPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cPrecioKeyTyped(evt);
            }
        });

        bLimpiar.setBackground(new java.awt.Color(51, 51, 51));
        bLimpiar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        bLimpiar.setText("Limpiar");
        bLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimpiarActionPerformed(evt);
            }
        });

        cId.setEditable(true);
        cId.setBackground(new java.awt.Color(255, 255, 255));
        cId.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cId.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cIdActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Sitka Banner", 1, 20)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Fecha:");

        jLabel8.setFont(new java.awt.Font("Sitka Banner", 1, 20)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Descripcion:");

        jLabel9.setFont(new java.awt.Font("Sitka Banner", 1, 20)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Precio Total:");

        botonBuscar.setBackground(new java.awt.Color(51, 51, 51));
        botonBuscar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        botonBuscar.setForeground(new java.awt.Color(255, 255, 255));
        botonBuscar.setText("Buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        buscador.setBackground(new java.awt.Color(255, 255, 255));
        buscador.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buscador.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "id", "Id_Cliente", "Precio" }));
        buscador.setSelectedItem(null);
        buscador.setBorder(null);
        buscador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscadorActionPerformed(evt);
            }
        });

        cBuscar.setBackground(new java.awt.Color(255, 255, 255));
        cBuscar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cBuscar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBuscarActionPerformed(evt);
            }
        });

        cProducto.setBackground(new java.awt.Color(255, 255, 255));
        cProducto.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cProducto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cProductoKeyTyped(evt);
            }
        });

        botonRegistrar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        botonRegistrar.setText("Registrar");
        botonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegistrarActionPerformed(evt);
            }
        });

        botonActualizar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        botonActualizar.setText("Actualizar");
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });

        bEliminar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bEliminar.setText("Eliminar");
        bEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarActionPerformed(evt);
            }
        });

        tProductos.setBackground(new java.awt.Color(153, 153, 153));
        tProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tProductos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tProductos.setAutoscrolls(false);
        tProductos.setEnabled(false);
        tProductos.setSelectionBackground(new java.awt.Color(102, 102, 102));
        jScrollPane2.setViewportView(tProductos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(272, 272, 272)
                        .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cId, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(174, 174, 174)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cProducto, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(cDescripcion)
                                            .addComponent(cCliente)
                                            .addComponent(cFecha)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(cPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(botonRegistrar)
                                    .addComponent(botonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(buscador, 0, 317, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addComponent(botonActualizar)
                                        .addGap(64, 64, 64)
                                        .addComponent(bEliminar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonSalir)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(cProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(cPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buscador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bEliminar))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonRegistrar)
                        .addComponent(botonActualizar)))
                .addGap(14, 14, 14))
        );

        cId.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1092, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 537, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void cClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cClienteActionPerformed

    private void bLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimpiarActionPerformed
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_bLimpiarActionPerformed

    private void cIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cIdActionPerformed

    private void cPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cPrecioActionPerformed

    private void cDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cDescripcionActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        // TODO add your handling code here:
        //aca buscar

        DefaultTableModel modelo1 = new DefaultTableModel();
        Connection conexion = null;
        modelo1.setColumnIdentifiers(new Object[]
        {
            "Id", "Proveedor", "Nombre", "Descripcion", "Existencias", "Precio/u", "Medida"
        });
        String donde = buscador.getSelectedItem().toString();
        switch (donde)
        {
            case "id":
        try
                {
                    conexion = Conexion.getConexion();
                    ps = conexion.prepareStatement("select *from insumo where id_insumo=?");
                    ps.setString(1, cBuscar.getText());
                    rs = ps.executeQuery();
                    while (rs.next())
                    {
                        modelo1.addRow(new Object[]
                        {
                            rs.getString("id_insumo"),
                            rs.getString("nombre_proveedor"),
                            rs.getString("nombre_insumo"),
                            rs.getString("descripcion"),
                            rs.getString("cantidad_existencia"),
                            rs.getString("precio_unidad"),
                            rs.getString("unidad_medida")
                        });

                    }
                    tablaInsumos.setModel(modelo1);
            } catch (Exception e)
            {
                //JOptionPane.showMessageDialog(null, e);
            }
            break;

            case "Proveedor":
//                
            try
                {
                    JOptionPane.showMessageDialog(rootPane, "Entre a proveedor");
                    conexion = Conexion.getConexion();
                    ps = conexion.prepareStatement("select *from insumo where nombre_proveedor=?");
                    ps.setString(1, cBuscar.getText());
                    rs = ps.executeQuery();
                    while (rs.next())
                    {
                        modelo1.addRow(new Object[]
                        {
                            rs.getString("id_insumo"),
                            rs.getString("nombre_proveedor"),
                            rs.getString("nombre_insumo"),
                            rs.getString("descripcion"),
                            rs.getString("cantidad_existencia"),
                            rs.getString("precio_unidad"),
                            rs.getString("unidad_medida")
                        });

                    }
                    tablaInsumos.setModel(modelo1);
            } catch (Exception e)
            {
                //JOptionPane.showMessageDialog(null, e);
            }

            break;

            case "Nombre":
try
                {
                    JOptionPane.showMessageDialog(rootPane, "Entre a nombre");
                    conexion = Conexion.getConexion();
                    ps = conexion.prepareStatement("select *from insumo where nombre_insumo=?");
                    ps.setString(1, cBuscar.getText());
                    rs = ps.executeQuery();
                    while (rs.next())
                    {
                        modelo1.addRow(new Object[]
                        {
                            rs.getString("id_insumo"),
                            rs.getString("nombre_proveedor"),
                            rs.getString("nombre_insumo"),
                            rs.getString("descripcion"),
                            rs.getString("cantidad_existencia"),
                            rs.getString("precio_unidad"),
                            rs.getString("unidad_medida")
                        });

                    }
                    tablaInsumos.setModel(modelo1);
            } catch (Exception e)
            {
                //JOptionPane.showMessageDialog(null, e);
            }
            break;

            case "Descripci√≥n":
try
                {
                    conexion = Conexion.getConexion();
                    ps = conexion.prepareStatement("select *from insumo where descripcion=?");
                    ps.setString(1, cBuscar.getText());
                    rs = ps.executeQuery();
                    while (rs.next())
                    {
                        modelo1.addRow(new Object[]
                        {
                            rs.getString("id_insumo"),
                            rs.getString("nombre_proveedor"),
                            rs.getString("nombre_insumo"),
                            rs.getString("descripcion"),
                            rs.getString("cantidad_existencia"),
                            rs.getString("precio_unidad"),
                            rs.getString("unidad_medida")
                        });

                    }
                    tablaInsumos.setModel(modelo1);
            } catch (Exception e)
            {
                //JOptionPane.showMessageDialog(null, e);
            }
            break;

            case "Cantidad":
try
                {
                    conexion = Conexion.getConexion();
                    ps = conexion.prepareStatement("select *from insumo where cantidad_existencia=?");
                    ps.setString(1, cBuscar.getText());
                    rs = ps.executeQuery();
                    while (rs.next())
                    {
                        modelo1.addRow(new Object[]
                        {
                            rs.getString("id_insumo"),
                            rs.getString("nombre_proveedor"),
                            rs.getString("nombre_insumo"),
                            rs.getString("descripcion"),
                            rs.getString("cantidad_existencia"),
                            rs.getString("precio_unidad"),
                            rs.getString("unidad_medida")
                        });

                    }
                    tablaInsumos.setModel(modelo1);
            } catch (Exception e)
            {
                //JOptionPane.showMessageDialog(null, e);
            }
            break;

            case "Precio":
try
                {
                    conexion = Conexion.getConexion();
                    ps = conexion.prepareStatement("select *from insumo where precio_unidad=?");
                    ps.setString(1, cBuscar.getText());
                    rs = ps.executeQuery();
                    while (rs.next())
                    {
                        modelo1.addRow(new Object[]
                        {
                            rs.getString("id_insumo"),
                            rs.getString("nombre_proveedor"),
                            rs.getString("nombre_insumo"),
                            rs.getString("descripcion"),
                            rs.getString("cantidad_existencia"),
                            rs.getString("precio_unidad"),
                            rs.getString("unidad_medida")
                        });

                    }
                    tablaInsumos.setModel(modelo1);
            } catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            break;

            case "Unidad de medida":
try
                {
                    conexion = Conexion.getConexion();
                    ps = conexion.prepareStatement("select *from insumo where unidad_medida=?");
                    ps.setString(1, cBuscar.getText());
                    rs = ps.executeQuery();
                    while (rs.next())
                    {
                        modelo1.addRow(new Object[]
                        {
                            rs.getString("id_insumo"),
                            rs.getString("nombre_proveedor"),
                            rs.getString("nombre_insumo"),
                            rs.getString("descripcion"),
                            rs.getString("cantidad_existencia"),
                            rs.getString("precio_unidad"),
                            rs.getString("unidad_medida")
                        });

                    }
                    tablaInsumos.setModel(modelo1);
            } catch (Exception e)
            {
                //JOptionPane.showMessageDialog(null, e);
            }
            break;

        }

    }//GEN-LAST:event_botonBuscarActionPerformed

    private void cBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cBuscarActionPerformed

    private void buscadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscadorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buscadorActionPerformed

    private void botonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRegistrarActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(null, "¬øDeseas continuar?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION)
        {
            Connection conexion = null;
            int resultado = 0;
            boolean yaRegistrado;
            try
            {
                conexion = Conexion.getConexion();
                ps = conexion.prepareStatement("insert into reparacion (id_producto,id_cliente,descripcion,fecha,total)values(?,?,?,?,?)");
                ps.setString(1, cProducto.getText());
                ps.setString(2, cCliente.getText());
                ps.setString(3, cDescripcion.getText());
                ps.setString(4, cFecha.getText());
                ps.setString(5, cPrecio.getText());
                
                ps1= conexion.prepareStatement("UPDATE inventario\n" +
"SET cantidad_existencia= cantidad_existencia-1\n" +
"WHERE id_producto=?");
                ps1.setString(1, cProducto.getText());
                
                if (!"".equals(cCliente.getText())
                        && !"".equals(cPrecio.getText()))
                {

                    resultado = ps.executeUpdate(); //ejecutamos la inserccion
                    ps1.executeUpdate();
                }
                if ((resultado > 0))
                {
                    JOptionPane.showMessageDialog(null, "Datos ingresados correctamente");
                    limpiar();
                    mostrarTabla();
                } else
                {
                    JOptionPane.showMessageDialog(null, "Verifique que los datos sean correctos");

                }
                conexion.close();

            } catch (Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Verifique los datos");
                System.out.println(ex);
            }
            tProductos.setRowSelectionAllowed(false);
            botonRegistrar.setEnabled(true);
        } else
        {

        }
    }//GEN-LAST:event_botonRegistrarActionPerformed

    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(null, "¬øDeseas continuar?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION)
        {
            resultado = 0;
            try
            {
                Connection conexion = Conexion.getConexion();
                ps = conexion.prepareStatement("update reparacion set id_producto=?,id_cliente=?,descripcion=?,fecha=?,total=? where id_Reparacion=?");
                
                ps.setString(1, cProducto.getText());
                ps.setString(2, cCliente.getText());
                ps.setString(3, cDescripcion.getText());
                ps.setString(4, cFecha.getText());
                ps.setString(5, cPrecio.getText());
                ps.setString(6, cId.getText());
                //resultado = ps.executeUpdate();

                if ((resultado > 0))
                {
                    JOptionPane.showMessageDialog(null, "Datos actualizados correctamente");
                    limpiar();
                } else
                {
                    JOptionPane.showMessageDialog(null, "No fue posible actualizar los datos");
                }
                conexion.close();
            } catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, "Verifique los datos");
            }
            mostrarTabla();
            limpiar();
            tProductos.setRowSelectionAllowed(false);
            botonRegistrar.setEnabled(true);
        } else
        {

        }
    }//GEN-LAST:event_botonActualizarActionPerformed

    private void bEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(null, "¬øDeseas continuar?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION)
        {
            try
            {
                Connection conexion = Conexion.getConexion();
                ps = conexion.prepareStatement("delete from reparacion where id_Reparacion=?");
                ps.setString(1, cId.getText());
                int resultado = ps.executeUpdate();
                if (resultado > 0)
                {
                    JOptionPane.showMessageDialog(null, "Eliminacion correcta");
                    mostrarTabla();
                } else
                {
                    JOptionPane.showMessageDialog(null, "No se realizo la eliminaci√≥n de los datos");
                }
                conexion.close();
            } catch (Exception e)
            {
                System.err.println(e);
            }
            limpiar();
            tProductos.setRowSelectionAllowed(false);
            botonRegistrar.setEnabled(true);
        } else
        {
            System.out.println("El usuario seleccion√≥ 'No'.");
        }
    }//GEN-LAST:event_bEliminarActionPerformed

    private void cProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cProductoKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();   
        if (!Character.isDigit(key))
        {
            evt.consume();
        } 
    }//GEN-LAST:event_cProductoKeyTyped

    private void cClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cClienteKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();   
        if (!Character.isDigit(key))
        {
            evt.consume();
        } 
    }//GEN-LAST:event_cClienteKeyTyped

    private void cPrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cPrecioKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();   
        if (!Character.isDigit(key)&& key!='.')
        {
            evt.consume();
        } 
    }//GEN-LAST:event_cPrecioKeyTyped

    /**
     * @param args the command line arguments
     */
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bEliminar;
    private javax.swing.JButton bLimpiar;
    private javax.swing.JButton botonActualizar;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonRegistrar;
    private javax.swing.JButton botonSalir;
    public javax.swing.JComboBox<String> buscador;
    private javax.swing.JTextField cBuscar;
    private javax.swing.JTextField cCliente;
    private javax.swing.JTextField cDescripcion;
    private javax.swing.JTextField cFecha;
    private javax.swing.JTextField cId;
    private javax.swing.JTextField cPrecio;
    private javax.swing.JTextField cProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tProductos;
    private javax.swing.JTable tablaInsumos;
    // End of variables declaration//GEN-END:variables

}
